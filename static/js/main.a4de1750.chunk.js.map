{"version":3,"sources":["serviceWorker.js","components/GettingGraphQLData.js","index.js"],"names":["Boolean","window","location","hostname","match","GET_USER_INFO","gql","UPDATE_MEMBER_FEEDBACK","graphql","props","React","useState","manager","setManager","showModal","setShowModal","currentMember","setCurrentMember","useMutation","update_member","reviewValue","data","useRef","useEffect","console","log","undefined","handleFeedback","eventClick","member","feedback","status","className","firstname","id","profiles","map","key","name","username","onClick","style","isOpen","content","top","left","right","bottom","marginRight","transform","contentLabel","ref","placeholder","rows","cols","value","current","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4wBCZN,IAAMC,EAAgBC,YAAH,KAoBbC,EAAyBD,YAAH,KA8GbE,cAAQH,EAARG,EA9FY,SAACC,GAAW,IAAD,EACRC,IAAMC,SAAS,MADP,mBAC9BC,EAD8B,KACtBC,EADsB,OAEJH,IAAMC,UAAS,GAFX,mBAE9BG,EAF8B,KAEpBC,EAFoB,OAGIL,IAAMC,SAAS,MAHnB,mBAG9BK,EAH8B,KAGhBC,EAHgB,OAIHC,YAAYX,GAJT,mBAI9BY,EAJ8B,KAK/BC,GAL+B,KAIbC,KACJX,IAAMY,UAW1B,GATAZ,IAAMa,WAAU,WAEfC,QAAQC,IAAIhB,EAAMY,WACQK,IAAvBjB,EAAMY,KAAKT,SAAoC,MAAXA,IACtCY,QAAQC,IAAI,SAAShB,EAAMY,KAAKT,QAAQ,IACxCC,EAAWJ,EAAMY,KAAKT,QAAQ,QAIjB,OAAZA,EACF,MAAO,aAGR,IAYMe,EAAiB,SAACC,EAAWC,GAClCL,QAAQC,IAAIG,GACZX,EAAiBY,GACC,OAAfD,EAC4B,SAA3BC,EAAOC,SAASC,QAClBhB,GAAa,GAKdI,KAYF,OADAK,QAAQC,WAAWb,EAAU,MAAMA,EAAQ,IAE1C,oCACC,yBAAKoB,UAAU,aAEd,yBAAKA,UAAU,mBACd,iDACA,sCAAYvB,EAAMY,KAAKT,QAAQ,GAAGqB,WAClC,oCAAUxB,EAAMY,KAAKT,QAAQ,GAAGsB,KAGjC,6CACCtB,EAAQuB,SAASC,KAAI,SAACP,GAEtB,OADAL,QAAQC,IAAII,GAEX,yBAAKG,UAAU,iBAAiBK,IAAKR,EAAOK,IAC3C,qCAAWL,EAAOS,MAClB,2CAAiBT,EAAOU,UAFzB,OAID,qCAAWV,EAAOK,IAChB,yCAA0C,SAA3BL,EAAOC,SAASC,OAAoBF,EAAOC,SAASC,OAAS,aAC9E,4BAAQS,QAAS,kBAAMb,EAAe,KAAKE,KAAqC,SAA3BA,EAAOC,SAASC,OAAoB,uBAAGC,UAAU,kBAAkBS,MAAO,CAAC,SAAW,UAAgB,uBAAGT,UAAU,oBAAoBS,MAAO,CAAC,SAAW,WAN9M,QAOA,4BAAQD,QAAS,kBAAMb,EAAe,OAAOE,KAAS,uBAAGG,UAAU,sBAAsBS,MAAO,CAAC,SAAW,eAK9G,kBAAC,IAAD,CACAC,OAAQ5B,EACR2B,MA9DkB,CACpBE,QAAU,CACRC,IAAwB,MACxBC,KAAwB,MACxBC,MAAwB,MACxBC,OAAwB,MACxBC,YAAwB,OACxBC,UAAwB,0BAwDxBC,aAAa,yBAHb,qBAKalC,QALb,IAKaA,OALb,EAKaA,EAAesB,KAC3B,8BAAWa,IAAK/B,EAAagC,YAAY,+BAA+BC,KAAK,IAAIC,KAAK,OACtF,6BACA,4BAAQd,QAzCS,WACpB,IAAMe,EAAQnC,EAAYoC,QAAQD,MAClC/B,QAAQC,IAAI8B,GACZxC,GAAa,KAsCV,gBCzHC0C,EAAS,IAAIC,IAAa,CAC/BC,IAAK,kDAGNC,IAASC,OACR,kBAAC,IAAD,CAAgBJ,OAAQA,GACvB,kBAAC,IAAD,CAAqBA,OAAQA,GAC5B,kBAAC,EAAD,QAGFK,SAASC,eAAe,SFgHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.a4de1750.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { gql } from \"apollo-boost\";\r\nimport Modal from 'react-modal';\r\nimport \"./GettingGraphQLData.css\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nconst GET_USER_INFO = gql`\r\n\t{\r\n\t\tmanager(where : { id: { _eq: \"077b5f62-936e-11ea-bb37-0242ac130002\" }}) {\r\n\t\t\tid\r\n    \t\tfirstname\r\n    \t\tpassword\r\n    \t\tfeedback_status\r\n\t\t\tprofiles(\r\n\t\t\t\twhere: { managerid: { _eq: \"077b5f62-936e-11ea-bb37-0242ac130002\" } }\r\n\t\t\t) {\r\n\t\t\t\tid\r\n      \t\t\tname\r\n      \t\t\tpassword\r\n      \t\t\tfeedback\r\n      \t\t\tusername\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst UPDATE_MEMBER_FEEDBACK = gql`\r\nmutation{\r\n\tupdate_profile(where: {\r\n\t  id : {_eq:4}\r\n\t},_set:{\r\n\t  feedback : {status : \"Very Good\"}\r\n  \r\n\t}){\r\n\t  returning{\r\n\t\tname\r\n\t\tfeedback\r\n\t  }\r\n\t}\r\n  }\r\n`;\r\n\r\nconst GettingGraphQLData = (props) => {\r\n\tconst [manager,setManager] = React.useState(null);\r\n\tconst [showModal,setShowModal] = React.useState(false);\r\n\tconst [currentMember,setCurrentMember] = React.useState(null);\r\n\tconst [update_member, { data }] = useMutation(UPDATE_MEMBER_FEEDBACK);\r\n\tconst reviewValue = React.useRef();\r\n\r\n\tReact.useEffect(() => {\t\r\n\r\n\t\tconsole.log(props.data)\r\n\t\tif(props.data.manager !== undefined && manager == null){\r\n\t\t\tconsole.log(\"Worked\",props.data.manager[0]);\r\n\t\t\tsetManager(props.data.manager[0])\r\n\t\t}\r\n\t});\r\n\r\n\tif(manager === null){\r\n\t\treturn \"Loading...\";\r\n\t}\r\n\r\n\tconst customStyles = {\r\n\t\tcontent : {\r\n\t\t  top                   : '30%',\r\n\t\t  left                  : '50%',\r\n\t\t  right                 : '20%',\r\n\t\t  bottom                : '30%',\r\n\t\t  marginRight           : '-20%',\r\n\t\t  transform             : 'translate(-50%, -50%)'\r\n\t\t}\r\n\t  };\r\n\r\n\t// @ts-ignore\r\n\tconst handleFeedback = (eventClick,member) => {\r\n\t\tconsole.log(eventClick);\r\n\t\tsetCurrentMember(member)\r\n\t\tif(eventClick !== \"up\"){\r\n\t\t\tif(member.feedback.status === \"null\"){\r\n\t\t\t\tsetShowModal(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\tupdate_member();\r\n\t\t}\r\n\t\t\r\n\t} \r\n\r\n\tconst handleReview = () => {\r\n\t\tconst value = reviewValue.current.value;\r\n\t\tconsole.log(value);\r\n\t\tsetShowModal(false);\r\n\t}\r\n\r\n\tconsole.log(typeof(manager), \"---\",manager[0]);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"manager-profile\">\r\n\t\t\t\t\t<h2>Manager's Profile</h2>\r\n\t\t\t\t\t<h3>Name : {props.data.manager[0].firstname}</h3>\r\n\t\t\t\t\t<h3>Id : {props.data.manager[0].id}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<h2>Team Members'</h2>\r\n\t\t\t\t{manager.profiles.map((member) => {\r\n\t\t\t\t\tconsole.log(member);\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"member-profile\" key={member.id}>\r\n\t\t\t\t\t\t\t<h4>Name: {member.name}</h4>\r\n\t\t\t\t\t\t\t<span>Username: {member.username}</span>\r\n\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t<span>Id: {member.id}</span>\r\n\t\t\t\t\t\t\t<p>Feedback : {member.feedback.status !== \"null\" ? member.feedback.status : \"Not Given\"}</p>\r\n\t\t\t\t\t<button onClick={() => handleFeedback(\"up\",member)}>{member.feedback.status !== \"null\" ? <i className=\"fa fa-thumbs-up\" style={{\"fontSize\":\"48px\"}}></i> : <i className=\"fa fa-thumbs-o-up\" style={{\"fontSize\":\"48px\"}}></i>}</button> &nbsp;\r\n\t\t\t\t\t\t<button onClick={() => handleFeedback(\"down\",member)}><i className=\"fa fa-thumbs-o-down\" style={{\"fontSize\":\"48px\"}}></i></button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<Modal \r\n\t\t\t\tisOpen={showModal}\r\n\t\t\t\tstyle={customStyles}\r\n\t\t\t\tcontentLabel=\"Minimal Modal Example\"\r\n\t\t\t\t>\r\n\t\t\t\t\tReview for {currentMember?.name}\r\n\t\t\t\t\t<textarea  ref={reviewValue} placeholder=\"Right review for Team member\" rows=\"6\" cols=\"80\"/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button onClick={handleReview}>submit</button>\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default graphql(GET_USER_INFO)(GettingGraphQLData);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ApolloClient from \"apollo-boost\"; //connect with our server which is running at backend\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks';\nimport GettingGraphQLData from \"./components/GettingGraphQLData\";\n\nconst client = new ApolloClient({\n\turi: \"https://flexpax-test.herokuapp.com/v1/graphql\",\n});\n\nReactDOM.render(\n\t<ApolloProvider client={client}>\n\t\t<ApolloHooksProvider client={client}>\n\t\t\t<GettingGraphQLData />\n\t\t</ApolloHooksProvider>\n\t</ApolloProvider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}